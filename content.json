[{"title":"Python模拟登陆知乎","date":"2017-03-19T02:24:18.000Z","path":"2017/03/19/python_zhihu/","text":"前期准备 首先，利用Python模拟登陆实际上就是运用程序模仿浏览器的行为，向服务器提交请求并附上参数（账号密码），（~~(&gt;_&lt;)~~好像是废话哦），Python的第三方库 Requests 为我们很好的解决了这个问题，就像她的简介那样：HTTP for Humans，我们可以非常灵活的运用她进行与服务器的对话。另外，由于HTTP是无状态协议，它无法对之前发生过的请求和相应的状态进行管理，也就是说，无法根据之前的状态进行本次的请求处理。所以，就有了Cookie技术，服务器通过cookie来确定客户端的状态。如下为客户端与服务器之间的对话： 我们成功的模拟登陆后，要想持续保持登陆状态，就需要保存Cookie，在之后进行的请求中加入这个Cookie参数，但是Requests库为我们提供了更简洁的方法，那就是引入会话对象，她能够跨请求保持某些参数，她会在同一个 Session 实例发出的所有请求之间保持 cookie，所以我们在开始初始化一个Session实例session = requests.Session()来进行模拟提交身份信息登录网站，登录成功后即保存了本次Cookie，以方便进行后续操作。 登录实例 我们平时利用浏览器上网，输入网址返回Web网页，这再平常不过了，但是现在要运用程序模拟浏览器来和服务器进行对话，那我们就需要了解其中的部分原理。这里我们用Chrome来查看当我们提交表单后浏览器进行了哪些操作。 首先，打开知乎登录界面，谷歌浏览器快捷键F12到Network进行抓包，这里我在提价密码时故意写错，因为如果正确的话登录成功后会自动加载首页，浏览器默认的会覆盖之前的登录请求，也可以选中Network中的Preserve log，它表示的是不会覆盖之前的加载内容。如图所示： 在这里通过email这一项可以看到本次请求的主要信息，Request URL为请求网址，Form Data为我们提交的表单数据，注意到这里除了email与password外，还有两两个参数，_xsrf 和 captcha，xsrf（Cross-site request forgery）跨站请求伪造，它是一串伪随机数，主要用于防止跨站请求伪造。我们可以在网页源代码中搜索获取该随机数，如图： 后续我们可以通过网页解析工具将该参数提取出。12345def get_xsrf(): response = session.get(&quot;https://www.zhihu.com&quot;, headers=headers) sel = etree.HTML(response.content) xsrf = sel.xpath(&apos;//input[@name=&quot;_xsrf&quot;]/@value&apos;)[0] return xsrf 另外一个参数 captcha，我们可以根据其后面的内容猜到它其实验证码啦，我们再来看抓包中有captcha.gif….该项， 我们打开其中的Request URL，可以发现该链接是指向验证码图片的，所以，我们只要获取该链接并将图片保存到本地识别（土办法 （捂脸）），提交该验证码即可获得该参数。 123456789101112def get_captcha(): &quot;&quot;&quot; 把验证码图片保存到当前目录，手动识别验证码 :return: &quot;&quot;&quot; t = str(int(time.time() * 1000)) captcha_url = &apos;https://www.zhihu.com/captcha.gif?r=&apos; + t + &quot;&amp;type=login&quot; r = session.get(captcha_url, headers=headers) with open(&apos;captcha.jpg&apos;, &apos;wb&apos;) as f: f.write(r.content) captcha = input(&quot;验证码：&quot;) return captcha 这样，我们就获得了需要提交的表单中的所有参数，之后运用post方法来向服务器发送请求， 1234567891011def login(email, password): login_url = &apos;https://www.zhihu.com/login/email&apos; data = &#123; &apos;email&apos;: email, &apos;password&apos;: password, &apos;_xsrf&apos;: get_xsrf(), &quot;captcha&quot;: get_captcha(), &apos;remember_me&apos;: &apos;true&apos;&#125; response = session.post(login_url, data=data, headers=headers) login_code = response.json() print(login_code[&apos;msg&apos;]) 打印结果中显示 登录成功就大功告成啦。由于我们引用的是会话对象，所以之后的后续操作我们只需用session来进行操作就会保证我们是登录状态的。 完整代码地址：https://github.com/anlaiAllen/Python_zhihu 参考资料：https://juejin.im/post/58dce2248d6d8100613a4cfb 后记 第一次写博客，才发现原来自己并不理解之前以为自己清楚的内容，真是绞尽脑汁，总是觉得写的不够准确，希望自己继续努力，让博客见证自己的成长。如果以上内容有哪些有偏差，有错误，请有缘看到此篇文章的各位多多指教，多谢。","tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]}]